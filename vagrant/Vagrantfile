# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "bento/ubuntu-22.04-arm64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  config.vm.box_check_update = false

  config.ssh.keys_only = true
  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "..", "/unav_workspace"

  # Disable the default share of the current code directory. Doing this
  # provides improved isolation between the vagrant box and your host
  # by making sure your Vagrantfile isn't accessable to the vagrant box.
  # If you use this you may want to enable additional shared subfolders as
  # shown above.
  config.vm.synced_folder "../.tools", "/unav_workspace/.tools", disabled: true

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
    vb.memory = "2048"
  end

  config.vm.provider "vmware_desktop" do |v|
    v.vmx["memsize"] = "3076"
    v.vmx["numvcpus"] = "4" 
    v.vmx["usb_xhci.autoConnect.device0"] = "vid:0x1209 pid:0xa770"
    v.vmx["usb_xhci.autoConnect.device1"] = "vid:0x483 pid:0x3748"
  end

  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
      curl -sfL https://direnv.net/install.sh | bash
      apt-get update -q
      apt-get install -y curl unzip \
        python3 python3-dev python3-pip python3-virtualenv python3.10-venv \
        build-essential usbutils bash-completion can-utils libncurses5 \
        --no-install-recommends
      
      echo 'export TOOLS_INSTALL_FOLDER=/opt' >> /home/vagrant/.bashrc
      echo 'eval "$(direnv hook bash)"' >> /home/vagrant/.bashrc
      
      cd /unav_workspace/
      
      ./dev_setup.sh
      direnv allow
      TOOLS_INSTALL_FOLDER=/opt ./toolchain_setup.sh
      # unfortunate workaround as CMake tool in vscode does not play nicely with direnv.
      echo "source /unav_workspace/.tools/${TOOL_ARCH}/.env" >> /home/vagrant/.bashrc
  SHELL
end
